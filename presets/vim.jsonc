/**
# Semi-complete Vim Keybindings for ModalEdit 

From get-go, providing comprehensive Vim emulation was a non-goal of ModalEdit.
The idea of the extension is to provide an engine that allows the user to map
any key combination to any command provided by VS Code. However, most users 
equate modal editing with Vim, and are familiar with its default keybindings. 
Vim users really love the powerful key sequences that combine editing operations 
with cursor movements or text ranges.

ModalEdit has also evolved by taking inspiration mainly from Vim. Many 
capabilities were added with the motive to enable some Vim feature that was 
previously not possible to implement. With version 2.0 ModalEdit's functionality 
is now extensive enough to build quite comprehensive Vim emulation.

Adding Vim keybindings as optional presets serves two purposes: it lowers the
barrier of entry for Vim users who don't want to spend the time defining 
bindings from ground up. Secondly, Vim presets serve as an example to show
how you can build sophisticated command sequences using the machinery provided 
by ModalEdit. 

If you are not interested how the Vim keybindings are implemented and just want
to use them, you can skip this discussion. Just import the presets by pressing 
`Ctrl+Shift+p` and running command **ModalEdit: Import preset keybindings**. If
you are planning to customize the bindings, or create Vim-style commands from
scratch, this document gives you pointers how to go about doing so.

## Game Plan

We start with the basic movement commands which are mostly straightforward
to implement. Movement commands have two modes of operation: normal mode (moving
cursor), and visual mode (extending selection). We make sure all movements work 
correctly in both modes. This allows us to reuse these keybindings when 
implementing more advanced operations. Our goal is to avoid repetition by 
building complex sequences from primitive commands.

In Vim, there are multiple key sequences for a same operation. For example,
you can convert a paragraph upper case by typing `gUip`. You can perform the 
same operation using visual mode by typing `vipU`. The trick we use is to 
convert key sequences that operate directly on character, word, line, paragraph,
etc. to analagous key sequence that works through visual mode. Consequently, we
can implement all the editing commands so that they work on active selection,
and reuse these commands with the other key sequences.


*/
{
    "keybindings": {
        // Move cursor with with enter and space
        "\n": [
            "cursorDown",
            {
                "command": "cursorMove",
                "args": {
                    "to": "wrappedLineFirstNonWhitespaceCharacter"
                }
            }
        ],
        " ": "cursorRight",
        // Move up/down/left/right
        "h": "cursorLeft",
        "j": "cursorDown",
        "k": "cursorUp",
        "l": "cursorRight",
        "0": {
            "command": "cursorMove",
            "args": "{ to: 'wrappedLineStart', select: __selecting }"
        },
        "$": {
            "command": "cursorMove",
            "args": "{ to: 'wrappedLineEnd', select: __selecting }"
        },
        "^": {
            "command": "cursorMove",
            "args": "{ to: 'wrappedLineFirstNonWhitespaceCharacter', select: __selecting }"
        },
        // Operations preficed with `g` key. Some also work with number prefix.
        "g": {
            // Move to last non-whitespace character in the line.
            "_": {
                "command": "cursorMove",
                "args": "{ to: 'wrappedLineLastNonWhitespaceCharacter', select: __selecting }"
            },
            // Move to the beginning of the file
            "g": {
                "condition": "__selecting",
                "true": "cursorTopSelect",
                "false": "cursorTop"
            },
            // Join lines without space between
            "J": [
                "editor.action.joinLines",
                "deleteRight"
            ],
            // Change case with motions
            "u,U": {
                "id": 1,
                "help": "Change case with motion",
                // Motions possibly repeated <_NUM_> times
                "u,U": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: __cmd.slice(0, -3) + 'V' + __rcmd[0] }"
                },
                "h,j,k,l,w,b,W,B,%": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __cmd.slice(0, -3) + __rcmd[0] + __rcmd[1] }"
                },
                // Non-repeatable motions
                "^,$,0,G,H,M,L": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[0] + __rcmd[1] }"
                },
                "g": {
                    "g,_": {
                        "command": "modaledit.typeNormalKeys",
                        "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                    }
                },
                // Apply until character is found
                "f,t,F,T": {
                    "help": "Do until _",
                    " -~": {
                        "command": "modaledit.typeNormalKeys",
                        "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                    }
                },
                // Apply inside delimiters
                "a,i": {
                    "help": "Do around/inside _",
                    "w,p,b,B,t, -/,:-@,[-`,{-~": {
                        "command": "modaledit.typeNormalKeys",
                        "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                    }
                }
            },
            // Goto next/previous tab
            "t": "workbench.action.nextEditor",
            "T": "workbench.action.previousEditor"
        },
        "G": {
            "condition": "__selecting",
            "true": "cursorBottomSelect",
            "false": "cursorBottom"
        },
        // Move to next/previous word
        "w": "cursorWordStartRight",
        "W": "cursorWordEndRight",
        "b": "cursorWordStartLeft",
        "B": "cursorWordEndLeft",
        // Move cursor to the top, middle, and bottom of the screen
        "H": {
            "command": "cursorMove",
            "args": "{ to: 'viewPortTop', select: __selecting }"
        },
        "M": {
            "command": "cursorMove",
            "args": "{ to: 'viewPortCenter', select: __selecting }"
        },
        "L": {
            "command": "cursorMove",
            "args": "{ to: 'viewPortBottom', select: __selecting }"
        },
        // Move to matching bracket
        "%": {
            "condition": "__selecting",
            "true": "editor.action.smartSelect.expand",
            "false": "editor.action.jumpToBracket"
        },
        // Move forwards/backwards until a character is found
        "f": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "typeAfterAccept": "h",
                "typeBeforeNextMatch": "l",
                "typeAfterNextMatch": "h",
                "typeAfterPreviousMatch": "v"
            }
        },
        "F": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "backwards": true,
                "typeAfterAccept": "v",
                "typeAfterNextMatch": "v",
                "typeBeforePreviousMatch": "l",
                "typeAfterPreviousMatch": "h"
            }
        },
        "t": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "typeAfterAccept": "hhv",
                "typeBeforeNextMatch": "ll",
                "typeAfterNextMatch": "hhv",
                "typeBeforePreviousMatch": "h",
                "typeAfterPreviousMatch": "lv"
            }
        },
        "T": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "backwards": true,
                "typeAfterAccept": "lv",
                "typeBeforeNextMatch": "h",
                "typeAfterNextMatch": "lv",
                "typeBeforePreviousMatch": "ll",
                "typeAfterPreviousMatch": "hhv"
            }
        },
        // Repeat previous f, F, t, T movement
        ";": "modaledit.nextMatch",
        ",": "modaledit.previousMatch",
        // Center cursor on screen
        "z": {
            "z": {
                "command": "revealLine",
                "args": "{ lineNumber: __line, at: 'center' }"
            }
        },
        // Switch to insert mode
        "i": "modaledit.enterInsert",
        "I": [
            "cursorHome",
            "modaledit.enterInsert"
        ],
        // Append text
        "a": [
            {
                "condition": "__char == ''",
                "false": "cursorRight"
            },
            "modaledit.enterInsert"
        ],
        "A": [
            "cursorEnd",
            "modaledit.enterInsert"
        ],
        // Append at the end of the word
        "e": {
            "a": [
                "cursorWordEndRight",
                "modaledit.enterInsert"
            ]
        },
        // Open new line
        "o": [
            "editor.action.insertLineAfter",
            "modaledit.enterInsert"
        ],
        "O": [
            "editor.action.insertLineBefore",
            "modaledit.enterInsert"
        ],
        // Editing
        // Replace a character under cursor
        "r": [
            "deleteRight",
            "modaledit.enterInsert"
        ],
        // Join lines
        "J": "editor.action.joinLines",
        // Undo
        "u": [
            "undo",
            "modaledit.cancelSelection"
        ],
        // Repeat last change
        ".": "modaledit.repeatLastChange",
        // Selection mode on/off
        "v": "modaledit.toggleSelection",
        "V": [
            {
                "command": "cursorMove",
                "args": {
                    "to": "wrappedLineStart"
                }
            },
            "modaledit.toggleSelection",
            "cursorDownSelect"
        ],
        // Edit (delete/yank/change/indent/outdent/reformat) with motion
        "d,y,c,<,>,=": {
            "id": 2,
            "help": "Edit with motion",
            // Motions possibly repeated <_NUM_> times
            "d,y,c,<,>,=": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: __cmd.slice(0, -2) + 'V' + (__rcmd[0] =='c' ? 'dO' : __rcmd[0]) }"
            },
            "h,j,k,l,w,b,W,B,%": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: 'v' + __cmd.slice(0, -2) + __rcmd[0] + __rcmd[1] }"
            },
            // Non-repeatable motions
            "^,$,0,G,H,M,L": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: 'v' + __rcmd[0] + __rcmd[1] }"
            },
            "g": {
                "g,_": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                }
            },
            // Apply until character is found
            "f,t,F,T": {
                "help": "Do until _",
                " -~": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                }
            },
            // Apply inside delimiters
            "a,i": {
                "help": "Do around/inside _",
                "w,p,b,B,t, -/,:-@,[-`,{-~": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: 'v' + __rcmd[1] + __rcmd[0] + __rcmd[2] }"
                }
            }
        },
        // Delete rest of line
        "D": [
            "modaledit.cancelSelection",
            "cursorEndSelect",
            "editor.action.clipboardCopyAction",
            "deleteRight",
            "modaledit.cancelSelection"
        ],
        // Delete single character
        "x": "deleteRight",
        // Yank rest of line
        "Y": [
            "modaledit.cancelSelection",
            "cursorEndSelect",
            "editor.action.clipboardCopyAction",
            "modaledit.cancelSelection"
        ],
        // Change rest of line
        "C": {
            "command": "modaledit.typeNormalKeys",
            "args": {
                "keys": "Di"
            }
        },
        // Substitute character (selection)
        "s": [
            "deleteRight",
            "modaledit.enterInsert"
        ],
        "S": {
            "command": "modaledit.typeNormalKeys",
            "args": {
                "keys": "cc"
            }
        },
        // Paste commands
        "p": [
            "cursorRight",
            "editor.action.clipboardPasteAction",
            "modaledit.cancelSelection"
        ],
        "P": [
            "editor.action.clipboardPasteAction",
            "modaledit.cancelSelection"
        ],
        // Repeat commands by prefixing with number(s)
        "1-9": {
            "id": 3,
            "help": "Repeat n times",
            "0-9": 3,
            "h,j,k,l,w,b,W,B,u,%": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: __rcmd[0] }",
                "repeat": "parseInt(__cmd)"
            },
            "v": {
                "command": "cursorRightSelect",
                "repeat": "parseInt(__cmd)"
            },
            "V": {
                "command": "expandLineSelection",
                "repeat": "parseInt(__cmd)"
            },
            "s": [
                {
                    "command": "cursorRightSelect",
                    "repeat": "parseInt(__cmd)"
                },
                "deleteRight",
                "modaledit.enterInsert"
            ],
            "S": {
                "command": "modaledit.typeNormalKeys",
                "args": "{ keys: parseInt(__cmd) + 'cc' }"
            },
            "J": [
                {
                    "command": "expandLineSelection",
                    "repeat": "parseInt(__cmd)"
                },
                "editor.action.joinLines",
                "modaledit.cancelSelection"
            ],
            // Two ways of jumping to a line <_NUM_>`G` or <_NUM_>`gg`
            "g": {
                "g": [
                    {
                        "command": "revealLine",
                        "args": "{ lineNumber: parseInt(__cmd) - 1, at: 'top' }"
                    },
                    {
                        "command": "cursorMove",
                        "args": {
                            "to": "viewPortTop"
                        }
                    }
                ],
                // Repeat some `g` commands.
                "u,U": 1,
                "J": {
                    "command": "modaledit.typeNormalKeys",
                    "args": "{ keys: __cmd.slice(-2) }",
                    "repeat": "parseInt(__cmd)"
                }
            },
            "G": [
                {
                    "command": "revealLine",
                    "args": "{ lineNumber: parseInt(__cmd) - 1, at: 'top' }"
                },
                {
                    "command": "cursorMove",
                    "args": {
                        "to": "viewPortTop"
                    }
                }
            ],
            "d,c,y,<,>,=": 2
        },
        // Entering command mode and closing documents
        ":": "workbench.action.showCommands",
        "Z": {
            "help": "Z - Close and save, Q - Close without saving",
            "Z": [
                "workbench.action.files.save",
                "workbench.action.closeActiveEditor"
            ],
            "Q": "workbench.action.closeActiveEditor"
        },
        // Searching
        "/": [
            {
                "command": "modaledit.search",
                "args": {
                    "caseSensitive": true,
                    "wrapAround": true
                }
            }
        ],
        "?": {
            "command": "modaledit.search",
            "args": {
                "backwards": true,
                "caseSensitive": true
            }
        },
        "n": "modaledit.nextMatch",
        "N": "modaledit.previousMatch",
        // Bookmarks
        "m": {
            "help": "Define mark _",
            "a-z": {
                "command": "modaledit.defineBookmark",
                "args": "{ bookmark: __rcmd[0] }"
            }
        },
        // Jump to bookmark
        "`": {
            "a-z": {
                "command": "modaledit.goToBookmark",
                "args": "{ bookmark: __rcmd[0], select: __selecting }"
            }
        },
        // Jump to beginning of line where bookmark resides
        "'": {
            "a-z": [
                {
                    "command": "modaledit.goToBookmark",
                    "args": "{ bookmark: __rcmd[0], select: __selecting }"
                },
                {
                    "command": "cursorMove",
                    "args": "{ to: 'wrappedLineFirstNonWhitespaceCharacter', select: __selecting }"
                }
            ]
        }
    },
    // Select (visual) mode commands.
    "selectbindings": {
        "l": "cursorRightSelect",
        "h": "cursorLeftSelect",
        "j": "cursorDownSelect",
        "k": "cursorUpSelect",
        "w": "cursorWordStartRightSelect",
        "W": "cursorWordEndRightSelect",
        "b": "cursorWordStartLeftSelect",
        "B": "cursorWordEndLeftSelect",
        // Select forwards/backwards until a character is found
        "f": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "selectTillMatch": true
            }
        },
        "F": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "backwards": true,
                "selectTillMatch": true
            }
        },
        "t": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "typeAfterAccept": "h",
                "typeBeforeNextMatch": "l",
                "typeAfterNextMatch": "h",
                "typeBeforePreviousMatch": "h",
                "typeAfterPreviousMatch": "l",
                "selectTillMatch": true
            }
        },
        "T": {
            "command": "modaledit.search",
            "args": {
                "acceptAfter": 1,
                "backwards": true,
                "typeAfterAccept": "l",
                "typeBeforeNextMatch": "h",
                "typeAfterNextMatch": "l",
                "typeBeforePreviousMatch": "l",
                "typeAfterPreviousMatch": "h",
                "selectTillMatch": true
            }
        },
        // Select around/inside
        "a,i": {
            "help": "Select around/inside _",
            "w": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '\\\\W', to: '\\\\W', regex: true, inclusive: __rcmd[1] == 'a' }"
                }
            ],
            "p": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '(?<=\\\\r?\\\\n)\\\\s*\\\\r?\\\\n', to: '(?<=\\\\r?\\\\n)\\\\s*\\\\r?\\\\n', regex: true, inclusive: __rcmd[1] == 'a', docScope: true }"
                }
            ],
            " -/,:-@,[-`,{-~": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: __rcmd[0], to: __rcmd[0], inclusive: __rcmd[1] == 'a' }"
                }
            ],
            "(,),b": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '(', to: ')', inclusive: __rcmd[1] == 'a', docScope: true }"
                }
            ],
            "{,},B": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '{', to: '}', inclusive: __rcmd[1] == 'a', docScope: true }"
                }
            ],
            "[,]": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '[', to: ']', inclusive: __rcmd[1] == 'a', docScope: true }"
                }
            ],
            "<,>,t": [
                {
                    "command": "modaledit.selectBetween",
                    "args": "{ from: '<', to: '>', inclusive: __rcmd[1] == 'a' }"
                }
            ]
        },
        // Indent/outdent/reformat selection
        ">": [
            "editor.action.indentLines",
            "modaledit.cancelSelection"
        ],
        "<": [
            "editor.action.outdentLines",
            "modaledit.cancelSelection"
        ],
        "=": [
            "editor.action.formatSelection",
            "modaledit.cancelSelection"
        ],
        // Delete (cut) selection
        "d,x": [
            "editor.action.clipboardCopyAction",
            "deleteRight",
            "modaledit.cancelSelection"
        ],
        // Change selection
        "c": [
            "editor.action.clipboardCopyAction",
            "deleteRight",
            "modaledit.enterInsert"
        ],
        // Yank (copy) selection
        "y": [
            "editor.action.clipboardCopyAction",
            "modaledit.cancelSelection"
        ],
        // Transform selection to lower/uppercase
        "u": [
            "editor.action.transformToLowercase",
            "modaledit.cancelSelection"
        ],
        "U": [
            "editor.action.transformToUppercase",
            "modaledit.cancelSelection"
        ]
    }
}