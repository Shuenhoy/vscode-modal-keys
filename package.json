{
    "name": "vscode-modal-keys",
    "displayName": "ModalKeys",
    "description": "Customizable modal editing (ala vim and kakoune)",
    "publisher": "haberdashpi",
    "repository": {
        "url": "https://github.com/haberdashPI/vscode-modal-keys"
    },
    "version": "0.1.0",
    "engines": {
        "vscode": "^1.55.0"
    },
    "license": "MIT",
    "categories": [
        "Keymaps",
        "Other"
    ],
    "activationEvents": [
        "*"
    ],
    "main": "./dist/extension.js",
    "targets": {
        "main": false,
        "": { 
            "publicUrl": "https://haberdashpi.github.io/vscode-modal-keys"
        }
    },
    "docs": "./dist/docs/README.html",
    "contributes": {
        "configuration": {
            "type": "object",
            "title": "ModalKeys",
            "properties": {
                "modalkeys.keybindings": {
                    "type": "object",
                    "description": "Keybindings map key â†’ VS Code commands",
                    "default": {},
                    "patternProperties": {
                        "^(([a-z|]{2,}):)?([^:]*)$": {
                            "anyOf": [
                                {
                                    "type": "string",
                                    "description": "VS Code command"
                                },
                                {
                                    "type": "array",
                                    "description": "Sequence of commands",
                                    "items": {
                                        "anyOf": [
                                            {
                                                "type": "object",
                                                "description": "Action"
                                            },
                                            {
                                                "type": "string",
                                                "description": "VS Code command"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "type": "object",
                                    "description": "VS Code command with arguments",
                                    "properties": {
                                        "command": {
                                            "type": "string",
                                            "description": "VS Code command"
                                        },
                                        "args": {
                                            "description": "Command arguments",
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "type": "object",
                                    "description": "Conditional command",
                                    "properties": {
                                        "condition": {
                                            "type": "string",
                                            "description": "JavaScript expression that is evaluated"
                                        }
                                    }
                                },
                                {
                                    "type": "number",
                                    "description": "Keymap id"
                                }
                            ]
                        }
                    }
                },
                "modalkeys.userPresetsFolder": {
                    "type": "string",
                    "description": "A folder where modal-key presets can be found.",
                    "scope": "machine"
                },
                "modalkeys.insertCursorStyle": {
                    "type": "string",
                    "enum": [
                        "block",
                        "block-outline",
                        "line",
                        "line-thin",
                        "underline",
                        "underline-thin"
                    ],
                    "default": "line",
                    "description": "Shape of the cursor when in insert mode."
                },
                "modalkeys.normalCursorStyle": {
                    "type": "string",
                    "enum": [
                        "block",
                        "block-outline",
                        "line",
                        "line-thin",
                        "underline",
                        "underline-thin"
                    ],
                    "default": "block",
                    "description": "Shape of the cursor when in normal mode."
                },
                "modalkeys.searchCursorStyle": {
                    "type": "string",
                    "enum": [
                        "block",
                        "block-outline",
                        "line",
                        "line-thin",
                        "underline",
                        "underline-thin"
                    ],
                    "default": "underline",
                    "description": "Shape of the cursor when incremental search is active."
                },
                "modalkeys.selectCursorStyle": {
                    "type": "string",
                    "enum": [
                        "block",
                        "block-outline",
                        "line",
                        "line-thin",
                        "underline",
                        "underline-thin"
                    ],
                    "default": "line-thin",
                    "description": "Shape of the cursor when selection is active in normal mode."
                },
                "modalkeys.insertStatusText": {
                    "type": "string",
                    "default": "-- $(edit) INSERT --",
                    "description": "Mode text (and icons) shown in status bar in insert mode."
                },
                "modalkeys.insertStatusColor": {
                    "type": "string",
                    "description": "Color of the status bar mode text in insert mode (in HTML format)."
                },
                "modalkeys.normalStatusText": {
                    "type": "string",
                    "default": "-- $(move) __MODENAME__ --",
                    "description": "Mode text (and icons) shown in status bar in both normal and custom modes."
                },
                "modalkeys.normalStatusColor": {
                    "type": "string",
                    "description": "Color of the status bar mode text in normal mode (in HTML format)."
                },
                "modalkeys.searchStatusText": {
                    "type": "string",
                    "default": "$(search) SEARCH",
                    "description": "Mode text (and icons) shown in status bar in search mode."
                },
                "modalkeys.searchStatusColor": {
                    "type": "string",
                    "description": "Color of the status bar mode text when in search mode (in HTML format)."
                },
                "modalkeys.selectStatusText": {
                    "type": "string",
                    "default": "-- $(paintcan) VISUAL --",
                    "description": "Mode text (and icons) shown in status bar selection is active in normal mode."
                },
                "modalkeys.selectStatusColor": {
                    "type": "string",
                    "description": "Color of the status bar mode text when selection is active in normal mode (in HTML format)."
                },
                "modalkeys.startInNormalMode": {
                    "type": "boolean",
                    "default": true,
                    "description": "Is editor initially in normal mode?"
                },
                "modalkeys.searchMatchBackground": {
                    "type": "string",
                    "description": "A html format color styling to highlight the current search match(if left blank defaults to built-in search style)."
                },
                "modalkeys.searchMatchBorder": {
                    "type": "string",
                    "description": "A html format color styling for the border of the current search match (if left blank defaults to built-in search style)."
                },
                "modalkeys.searchOtherMatchesBackground": {
                    "type": "string",
                    "description": "A html format color styling to highlight other search matches (if left blank defaults to built-in search style)."
                },
                "modalkeys.searchOtherMatchesBorder": {
                    "type": "string",
                    "description": "A html format color styling for the border of other search matches (if left blank defaults to built-in search style)."
                }
            }
        },
        "commands": [
            {
                "command": "modalkeys.toggle",
                "title": "ModalKeys: Toggle normal / insert mode"
            },
            {
                "command": "modalkeys.enterNormal",
                "title": "ModalKeys: Normal mode"
            },
            {
                "command": "modalkeys.enterMode",
                "title": "ModalKeys: the specified mode."
            },
            {
                "command": "modalkeys.enterInsert",
                "title": "ModalKeys: Insert mode"
            },
            {
                "command": "modalkeys.cancelSearch",
                "title": "ModalKeys: Cancel search mode"
            },
            {
                "command": "modalkeys.deleteCharFromSearch",
                "title": "ModalKeys: Delete the last search character"
            },
            {
                "command": "modalkeys.importPresets",
                "title": "ModalKeys: Import preset keybindings"
            }
        ],
        "keybindings": [
            {
                "key": "Escape",
                "command": "modalkeys.enterNormal",
                "when": "editorTextFocus && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
            },
            {
                "key": "Escape",
                "command": "modalkeys.cancelSearch",
                "when": "editorTextFocus && modalkeys.searching"
            },
            {
                "key": "Backspace",
                "command": "modalkeys.deleteCharFromSearch",
                "when": "editorTextFocus && modalkeys.searching"
            }
        ]
    },
    "watch": {
        "build-html-docs": {
            "patterns": [
                "docs",
                "src",
                "presets",
                "README.md"
            ],
            "extensions": "js,ts,md,css",
            "ignore": "docs/build",
            "delay": 1000
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run package",
        "compile": "webpack",
        "watch": "webpack --watch",
        "build-html-docs": "node docs/build.js",
        "watch-html-docs": "npx npm-watch build-html-docs",
        "parcel-docs": "npx parcel docs/build/README.html",
        "parcel-build-docs": "npx parcel build docs/build/README.html --dist-dir dist/docs",
        "keep-watching-docs": "npm-run-all --parallel parcel-docs watch-html-docs",
        "watch-docs": "npm-run-all --serial build-html-docs keep-watching-docs",
        "build-docs": "npm-run-all --serial build-html-docs parcel-build-docs",
        "package": "webpack --mode production --devtool hidden-source-map",
        "test-compile": "tsc -p ./",
        "test-watch": "tsc -watch -p ./",
        "pretest": "npm run test-compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
        "@types/glob": "^7.1.3",
        "@types/lodash": "^4.14.168",
        "@types/mocha": "^8.0.4",
        "@types/node": "^12.11.7",
        "@types/vscode": "^1.55.0",
        "@typescript-eslint/eslint-plugin": "^4.14.1",
        "@typescript-eslint/parser": "^4.14.1",
        "cpx": "^1.5.0",
        "eslint": "^7.19.0",
        "glob": "^7.1.6",
        "highlight.js": "^11.0.1",
        "jdi": "^1.1.3",
        "lodash": "^4.17.21",
        "mkdirp": "^0.5.5",
        "mocha": "^8.2.1",
        "remarkable": "^2.0.1",
        "tailwindcss": "^2.2.4",
        "ts-loader": "^8.0.14",
        "typescript": "^4.1.3",
        "vscode-test": "^1.5.0",
        "webpack": "^5.19.0",
        "webpack-cli": "^4.4.0"
    },
    "dependencies": {
        "http-server": "^0.12.3",
        "npm-run-all": "^4.1.5",
        "npm-watch": "^0.10.0",
        "parcel": "*",
        "remarkable-header-ids": "^0.2.0",
        "typedoc": "^0.20.37"
    }
}
